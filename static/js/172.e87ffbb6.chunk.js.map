{"version":3,"file":"static/js/172.e87ffbb6.chunk.js","mappings":"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","sources":["webpack://first-project/./src/components/Content/ProfileInfo/ProfileInfo.module.css?17ab","components/Content/ProfileInfo/ProfileStatus.jsx","components/Content/ProfileInfo/PorfileInfo.jsx","webpack://first-project/./src/components/Content/MyPosts/MyPosts.module.css?f55d","webpack://first-project/./src/components/Content/MyPosts/Posts/Posts.module.css?ffb8","components/Content/MyPosts/Posts/Posts.jsx","components/Content/MyPosts/MyPosts.jsx","components/Content/MyPosts/MyPostsContainer.jsx","components/Content/Content.jsx","components/Content/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"discript\":\"ProfileInfo_discript__LMVYM\"};","import React, { useEffect, useState } from \"react\";\r\n\r\nconst ProfileStatus = React.memo(props => {\r\n\r\n    const [editMode, setEditMode] = useState(true)\r\n\r\n    const [status , setStatus] = useState('')\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const toggleEditMode = async () => {\r\n        setEditMode(!editMode);\r\n      \r\n        if (!editMode) {\r\n          try {\r\n            await props.updateStatus(status);\r\n          } catch (error) {\r\n            console.error('Ошибка при обновлении статуса:', error);\r\n            alert('Не удалось обновить статус. Попробуйте снова.');\r\n          }\r\n        }\r\n      };\r\n\r\n    const handleStatusChange = (e) => { \r\n        setStatus(e.target.value)\r\n    }\r\n\r\n    let content;\r\n\r\n    if (editMode) {\r\n        content = (\r\n            <div>\r\n                <span onDoubleClick={() => {setEditMode(false)}}>{status}</span>\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        content = (\r\n            <div>\r\n                <input autoFocus={true} value={status} onChange={handleStatusChange}/>\r\n                <button onClick={toggleEditMode}>confirm</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return content\r\n\r\n}\r\n)\r\n\r\n\r\n\r\n\r\n    export default ProfileStatus\r\n","import React from 'react';\r\nimport a from './ProfileInfo.module.css';\r\nimport Preloader from '../../Preloader/Preloader';\r\nimport ProfileStatus from './ProfileStatus';\r\n\r\n\r\n\r\nconst ProfileInfo = React.memo(props => {\r\n  if (!props.profile) { \r\n    return <Preloader />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <img src={props.profile.photos.large}></img>\r\n      </div>\r\n      <div className={a.discript}>\r\n        <img src={props.profile.photos.small}></img>\r\n      </div>\r\n      <div>\r\n        <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n      </div>\r\n      <div>\r\n        Contacts : \r\n        <div>VK: {props.profile.contacts.vk}</div>\r\n        <div>FACEBOOK: {props.profile.contacts.facebook}</div>\r\n        <div>GITHUB: {props.profile.contacts.github}</div>\r\n        <div>TWITTE: {props.profile.contacts.twitter}</div>\r\n        <div>YOUTUBE: {props.profile.contacts.youtube}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n\r\n}\r\n)\r\n\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MyPosts_item__N38E3\",\"active\":\"MyPosts_active__z6RuA\",\"passive\":\"MyPosts_passive__d9eyS\",\"btn\":\"MyPosts_btn__6mCXH\",\"parentcontainer\":\"MyPosts_parentcontainer__DczHS\",\"textarea\":\"MyPosts_textarea__JwR+N\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Posts_item__E72Mx\",\"active\":\"Posts_active__n5LVx\",\"passive\":\"Posts_passive__356S+\"};","import React from 'react';\r\nimport a from './Posts.module.css';\r\n\r\nconst   Posts = (props) => {\r\n  return (\r\n    <div>\r\n      <div className={a.active}>\r\n        <img src='https://i.pinimg.com/originals/5f/a0/d6/5fa0d60a2e9e8ea2abb7af6c446c035a.jpg'></img>\r\n        <span>{props.Message} </span>\r\n        <div>\r\n          <button>Like</button> {props.likeCount}\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Posts;","import React from 'react';\r\nimport a from './MyPosts.module.css';\r\nimport Posts from './Posts/Posts';\r\nimport { useForm } from 'react-hook-form';\r\n\r\n\r\nconst MyPosts = React.memo(props => {\r\n  console.log(\"render\")\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset\r\n  } = useForm()\r\n\r\n\r\n  let postsElements = props.profilePage.postsData.map(p => <Posts Message={p.text} likeCount={p.likesCount} />)\r\n\r\n  let newPostElement = React.createRef();\r\n\r\n\r\n  const onSubmit = (data) => {\r\n    console.log('Данные:', data)\r\n    if (data.posts.trim()) {\r\n      props.addPost(data.posts)\r\n      reset()\r\n    } else {\r\n      reset()\r\n    }\r\n  }\r\n\r\n  return (\r\n    \r\n    <div className={`${a.item} ${a.active}`}>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <div className={a.parentcontainer}>\r\n          <textarea\r\n            {...register('posts', { required: 'Пост не может быть пустым' })}\r\n            placeholder='Введите новый пост...'\r\n            className={a.textarea} />\r\n        </div>\r\n        <div className={a.parentcontainer}>\r\n          <button type='submit' className={a.btn}> Add POST </button>\r\n          <button type='submit' className={a.btn}>Remove</button>\r\n        </div>\r\n      </form>\r\n\r\n      <div className={a.posts}>\r\n        {postsElements}\r\n      </div >\r\n    </div>\r\n  )\r\n}\r\n)\r\n\r\n\r\n\r\nexport default MyPosts;","import { connect } from 'react-redux';\r\nimport { addPostActionCreator} from '../../../redux/profileReducer';\r\nimport MyPosts from './MyPosts';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      profilePage: state.profilePage\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      addPost: (posts) => {\r\n          dispatch(addPostActionCreator(posts))\r\n          }\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/PorfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nconst Profile = (props) => {\r\n  \r\n  if (!props.isAuth) {\r\n    return <Navigate to =\"/login\" replace />\r\n  } \r\n    \r\n  return <div>\r\n    <ProfileInfo profile = {props.profile} updateStatus ={props.updateStatus} />\r\n    <MyPostsContainer />\r\n\r\n  </div>\r\n}\r\n\r\n\r\nexport default Profile;","import React, { useEffect } from 'react';\r\nimport Profile from './Content';\r\nimport { connect } from 'react-redux';\r\nimport { getProfileInfo, getStatus, updateStatus} from '../../redux/profileReducer';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { AuthNavigate } from '../hoc/AuthNavigate';\r\nimport { compose } from 'redux';\r\n\r\n\r\n\r\n\r\n\r\nconst ProfileContainer = (props) => {\r\n    const params = useParams()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => { \r\n        let profileId = params.userId;\r\n        if (!profileId) {\r\n            profileId = 32217;\r\n             if (!profileId) { \r\n                navigate(\"/login\")\r\n             }\r\n        }\r\n        props.getProfileInfo(profileId)\r\n        props.getStatus(profileId)\r\n    }, [params.userId, navigate, props.ID])\r\n    \r\n        return (<Profile {...props} profile={props.profile} status={props.status} updateStatus={props.updateStatus} />)\r\n    \r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({ \r\n    profile: state.profilePage.info,\r\n    status: state.profilePage.status,\r\n    ID: state.profilePage.info?.userId || null\r\n})\r\n\r\n\r\nexport default compose(\r\n    connect ( mapStateToProps , {getProfileInfo, getStatus , updateStatus}), \r\n    AuthNavigate\r\n    )(ProfileContainer)\r\n\r\n"],"names":["React","props","editMode","setEditMode","useState","status","setStatus","useEffect","toggleEditMode","async","updateStatus","error","console","alert","handleStatusChange","e","target","value","content","_jsx","children","onDoubleClick","_jsxs","autoFocus","onChange","onClick","profile","src","photos","large","className","a","small","ProfileStatus","contacts","vk","facebook","github","twitter","youtube","Preloader","Message","likeCount","log","register","handleSubmit","formState","errors","reset","useForm","postsElements","profilePage","postsData","map","p","Posts","text","likesCount","item","active","onSubmit","data","posts","trim","addPost","parentcontainer","required","placeholder","textarea","type","btn","connect","state","dispatch","addPostActionCreator","MyPosts","isAuth","ProfileInfo","MyPostsContainer","Navigate","to","replace","compose","_state$profilePage$in","info","ID","userId","getProfileInfo","getStatus","AuthNavigate","params","useParams","navigate","useNavigate","profileId","Profile"],"sourceRoot":""}